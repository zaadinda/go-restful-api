// Code generated by MockGen. DO NOT EDIT.
// Source: service/category_service.go
<<<<<<< HEAD
//
// Generated by this command:
//
//	mockgen -source=service/category_service.go -destination=service/mocks/category_service_mock.go -package=mocks
//
=======
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	web "github.com/aronipurwanto/go-restful-api/model/web"
<<<<<<< HEAD
	gomock "go.uber.org/mock/gomock"
=======
	gomock "github.com/golang/mock/gomock"
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
)

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
<<<<<<< HEAD
	isgomock struct{}
=======
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryService) Create(ctx context.Context, request web.CategoryCreateRequest) (web.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(web.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
<<<<<<< HEAD
func (mr *MockCategoryServiceMockRecorder) Create(ctx, request any) *gomock.Call {
=======
func (mr *MockCategoryServiceMockRecorder) Create(ctx, request interface{}) *gomock.Call {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryService)(nil).Create), ctx, request)
}

// Delete mocks base method.
<<<<<<< HEAD
func (m *MockCategoryService) Delete(ctx context.Context, categoryId int) error {
=======
func (m *MockCategoryService) Delete(ctx context.Context, categoryId uint64) error {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, categoryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
<<<<<<< HEAD
func (mr *MockCategoryServiceMockRecorder) Delete(ctx, categoryId any) *gomock.Call {
=======
func (mr *MockCategoryServiceMockRecorder) Delete(ctx, categoryId interface{}) *gomock.Call {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryService)(nil).Delete), ctx, categoryId)
}

// FindAll mocks base method.
func (m *MockCategoryService) FindAll(ctx context.Context) ([]web.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]web.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
<<<<<<< HEAD
func (mr *MockCategoryServiceMockRecorder) FindAll(ctx any) *gomock.Call {
=======
func (mr *MockCategoryServiceMockRecorder) FindAll(ctx interface{}) *gomock.Call {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCategoryService)(nil).FindAll), ctx)
}

// FindById mocks base method.
<<<<<<< HEAD
func (m *MockCategoryService) FindById(ctx context.Context, categoryId int) (web.CategoryResponse, error) {
=======
func (m *MockCategoryService) FindById(ctx context.Context, categoryId uint64) (web.CategoryResponse, error) {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, categoryId)
	ret0, _ := ret[0].(web.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
<<<<<<< HEAD
func (mr *MockCategoryServiceMockRecorder) FindById(ctx, categoryId any) *gomock.Call {
=======
func (mr *MockCategoryServiceMockRecorder) FindById(ctx, categoryId interface{}) *gomock.Call {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCategoryService)(nil).FindById), ctx, categoryId)
}

// Update mocks base method.
func (m *MockCategoryService) Update(ctx context.Context, request web.CategoryUpdateRequest) (web.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request)
	ret0, _ := ret[0].(web.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
<<<<<<< HEAD
func (mr *MockCategoryServiceMockRecorder) Update(ctx, request any) *gomock.Call {
=======
func (mr *MockCategoryServiceMockRecorder) Update(ctx, request interface{}) *gomock.Call {
>>>>>>> e1936bc3f26fda82e78e1c6def74a6990cf9675c
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryService)(nil).Update), ctx, request)
}
